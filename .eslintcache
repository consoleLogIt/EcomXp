[{"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\App.js":"1","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\index.js":"2","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\ProductDetail.jsx":"3","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\Products.jsx":"4","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\index.js":"5","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\Cart.jsx":"6","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\Navbar\\Navbar.jsx":"7","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\AddProducts.jsx":"8","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\reducers\\index.js":"9","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\api\\index.js":"10","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\actions\\index.js":"11","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\reducers\\products.js":"12","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\reducers\\cart.js":"13"},{"size":1492,"mtime":1608372566374,"results":"14","hashOfConfig":"15"},{"size":557,"mtime":1608374010845,"results":"16","hashOfConfig":"15"},{"size":3887,"mtime":1608388411255,"results":"17","hashOfConfig":"15"},{"size":8387,"mtime":1608378608089,"results":"18","hashOfConfig":"15"},{"size":251,"mtime":1607692416872,"results":"19","hashOfConfig":"15"},{"size":3175,"mtime":1608378824426,"results":"20","hashOfConfig":"15"},{"size":2334,"mtime":1608311204984,"results":"21","hashOfConfig":"15"},{"size":2075,"mtime":1608305606209,"results":"22","hashOfConfig":"15"},{"size":6246,"mtime":1608374034607,"results":"23","hashOfConfig":"15"},{"size":352,"mtime":1608386352588,"results":"24","hashOfConfig":"15"},{"size":2177,"mtime":1608378638058,"results":"25","hashOfConfig":"15"},{"size":4803,"mtime":1608376786110,"results":"26","hashOfConfig":"15"},{"size":1046,"mtime":1608378601034,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10l99xe",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\App.js",[],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\index.js",[],["59","60"],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\ProductDetail.jsx",["61"],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\Products.jsx",["62"],"import React from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Button,\r\n  Typography,\r\n  Grid,\r\n  Tooltip,\r\n  Chip,\r\n} from \"@material-ui/core/\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\r\nimport {\r\n  deleteProduct,\r\n  addToCart,\r\n  enableEditMode,\r\n  disableEditMode,\r\n  updatePrice,\r\n  updateDescription,\r\n  updateRatings,\r\n  updateTitle,\r\n  sortByPrice,\r\n  unsort,\r\n  viewProductDetail,\r\n} from \"../actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport EdiText from \"react-editext\";\r\nimport AddShoppingCartIcon from \"@material-ui/icons/AddShoppingCart\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nlet clickableStatus = true;\r\n\r\nfunction Poducts(props) {\r\n  const { store } = props;\r\n  const { productsReducer } = store.getState();\r\n  const {products} = productsReducer;\r\n  const history = useHistory();\r\n\r\n  const handleDeleteProduct = (id) => {\r\n    store.dispatch(deleteProduct(id));\r\n  };\r\n\r\n  const handleAddToCart = (product) => {\r\n    const { cartReducer } = store.getState();\r\n    const {cart} = cartReducer;\r\n   for(let i in cart){\r\n     if(cart[i].id===product.id){\r\n      alert(\"Already in cart\");\r\n      return;\r\n     }\r\n   }\r\n\r\n\r\n    store.dispatch(addToCart(product));\r\n\r\n  };\r\n\r\n  const handleEnableEdit = (id) => {\r\n    store.dispatch(enableEditMode(id));\r\n  };\r\n\r\n  const handledisableEdit = (id) => {\r\n    store.dispatch(disableEditMode(id));\r\n  };\r\n\r\n  const handleUpdateRating = (id, rating) => {\r\n    store.dispatch(updateRatings(id, rating));\r\n  };\r\n\r\n  const handleUpdatePrice = (id, price) => {\r\n    store.dispatch(updatePrice(id, price));\r\n  };\r\n\r\n  const handleUpdateDescription = (id, description) => {\r\n    store.dispatch(updateDescription(id, description));\r\n  };\r\n\r\n  const handleUpdateTitle = (id, title) => {\r\n    store.dispatch(updateTitle(id, title));\r\n  };\r\n  const handleProductDetail = (product) => {\r\n    store.dispatch(viewProductDetail(product));\r\n    history.push(\"/product-detail\");\r\n  };\r\n\r\n  const handleSort = () => {\r\n    clickableStatus = false;\r\n    store.dispatch(sortByPrice());\r\n  };\r\n\r\n  const handleUnSort = () => {\r\n    clickableStatus = true;\r\n    store.dispatch(unsort());\r\n  };\r\n  // const {product} = store.getState();\r\n  return (\r\n    <Container style={{ height: \"100vh\", padding: \"4%\" }}>\r\n      <div style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\r\n        {clickableStatus ? (\r\n          <Chip label=\"Sort by Price\" onClick={handleSort} variant=\"outlined\" />\r\n        ) : (\r\n          <Chip\r\n            label=\"Remove Sort\"\r\n            onDelete={handleUnSort}\r\n            variant=\"outlined\"\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      {products.length === 0 ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        products.map((item) => (\r\n          <Card style={{ width: \"90%\", margin: \"2% auto\" }}>\r\n            <CardContent style={{ display: \"flex\" }}>\r\n              <Grid md={4}>\r\n                <Typography component=\"div\">\r\n                  <img\r\n                    onClick={() => handleProductDetail(item)}\r\n                    alt=\"product image\"\r\n                    src={item.imgUrl}\r\n                    style={{\r\n                      width: \"258px\",\r\n                      height: \"250px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  />\r\n                </Typography>\r\n              </Grid>\r\n              <Grid md={7}>\r\n                <Typography\r\n                  style={{\r\n                    fontSize: \"1.3rem\",\r\n                    fontWeight: \"bold\",\r\n                    margin: \"2%\",\r\n                  }}\r\n                >\r\n                  {item.editMode ? (\r\n                    <EdiText\r\n                      type=\"input\"\r\n                      inputProps={{\r\n                        placeholder: \"Update Title\",\r\n                      }}\r\n                      value={item.title}\r\n                      onSave={(e) => handleUpdateTitle(item.id, e)}\r\n                    />\r\n                  ) : (\r\n                    `${item.title}`\r\n                  )}\r\n                </Typography>\r\n                <Typography\r\n                  style={{\r\n                    fontSize: \"1.3rem\",\r\n                  }}\r\n                >\r\n                  {item.editMode ? (\r\n                    <EdiText\r\n                      type=\"textarea\"\r\n                      inputProps={{\r\n                        className: \"textarea\",\r\n                        placeholder: \"Type your content here\",\r\n                        style: {\r\n                          outline: \"none\",\r\n                          minWidth: \"auto\",\r\n                        },\r\n                        rows: 7,\r\n                      }}\r\n                      value={item.description}\r\n                      onSave={(e) => handleUpdateDescription(item.id, e)}\r\n                    />\r\n                  ) : (\r\n                    `${item.description}`\r\n                  )}\r\n                </Typography>\r\n                <Typography\r\n                  style={{\r\n                    fontSize: \"1.2rem\",\r\n                    margin: \"2%\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  {item.editMode ? (\r\n                    <EdiText\r\n                      type=\"input\"\r\n                      inputProps={{\r\n                        placeholder: \"Update price\",\r\n                      }}\r\n                      value={item.price}\r\n                      onSave={(e) => handleUpdatePrice(item.id, e)}\r\n                    />\r\n                  ) : (\r\n                    `Rs. ${item.price}`\r\n                  )}\r\n                  <LocalOfferIcon\r\n                    fontSize=\"large\"\r\n                    style={{ marginLeft: \"1%\" }}\r\n                  />\r\n                </Typography>\r\n              </Grid>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Grid container justify=\"space-around\" md={4}>\r\n                {item.editMode ? (\r\n                  <Rating\r\n                    name=\"simple-controlled\"\r\n                    value={item.rating}\r\n                    onChange={(e, value) => handleUpdateRating(item.id, value)}\r\n                  />\r\n                ) : (\r\n                  <Rating name=\"read-only\" value={item.rating} readOnly />\r\n                )}\r\n\r\n                <Button size=\"small\" color=\"primary\">\r\n                  Share Now\r\n                </Button>\r\n              </Grid>\r\n              <Grid container justify=\"center\" md={6}>\r\n                <Tooltip title={item.editMode ? \"Disable Edit\" : \"Enable Edit\"}>\r\n                  <IconButton>\r\n                    {item.editMode ? (\r\n                      <CloseIcon\r\n                        fontSize=\"large\"\r\n                        style={{ margin: \"0 5%\" }}\r\n                        onClick={() => handledisableEdit(item.id)}\r\n                      />\r\n                    ) : (\r\n                      <EditIcon\r\n                        fontSize=\"large\"\r\n                        style={{ margin: \"0 5%\" }}\r\n                        onClick={() => handleEnableEdit(item.id)}\r\n                      />\r\n                    )}\r\n                  </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Delete\">\r\n                  <IconButton>\r\n                    <DeleteIcon\r\n                      fontSize=\"large\"\r\n                      onClick={() => handleDeleteProduct(item.id)}\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n              <Grid container justify=\"center\" md={2}>\r\n                <Tooltip title=\"Add to Cart\">\r\n                  <IconButton>\r\n                    <AddShoppingCartIcon\r\n                      fontSize=\"large\"\r\n                      onClick={() => handleAddToCart(item)}\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </CardActions>\r\n          </Card>\r\n        ))\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Poducts;\r\n",["63","64"],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\index.js",[],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\Cart.jsx",["65"],"import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { removeFromCart } from \"../actions\";\r\nimport RemoveShoppingCartIcon from \"@material-ui/icons/RemoveShoppingCart\";\r\n\r\nfunction Cart(props) {\r\n  const { store } = props;\r\n  const { cartReducer } = store.getState();\r\n  const {cart}  = cartReducer\r\n\r\n  const handleRemovFromCart = (product) => {\r\n    store.dispatch(removeFromCart(product));\r\n  };\r\n  return (\r\n    <Container\r\n      style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\r\n    >\r\n      {cart.length === 0 ? (\r\n        <Typography style={{ fontSize: \"2rem\" }}>Cart is Empty</Typography>\r\n      ) : (\r\n        cart.map((item) => (\r\n          <Card style={{ minWidth: \"25%\", margin: \"4% 2%\" }}>\r\n            <Box display=\"flex\" alignContent=\"center\">\r\n              <CardContent>\r\n                <Typography component=\"div\">\r\n                  <img\r\n                    alt=\"product image\"\r\n                    src={item.imgUrl}\r\n                    style={{ width: \"258px\", height: \"250px\" }}\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n            </Box>\r\n            <CardActions>\r\n              <Grid container justify=\"space-around\" md={6}>\r\n                <Rating name=\"read-only\" value={item.rating} readOnly />\r\n                <Tooltip title=\"Remove\">\r\n                  <IconButton>\r\n                    <RemoveShoppingCartIcon\r\n                      onClick={() => handleRemovFromCart(item.id)}\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n              <Grid container justify=\"space-around\" md={6}>\r\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                  <Typography\r\n                    style={{\r\n                      fontSize: \"1.3rem\",\r\n                      fontWeight: \"bold\",\r\n                      margin: \"2%\",\r\n                    }}\r\n                  >\r\n                    {item.title}\r\n                  </Typography>\r\n                  <Typography\r\n                    style={{\r\n                      fontSize: \"1.2rem\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                      margin: \"2%\",\r\n                    }}\r\n                  >\r\n                    Rs.{item.price}\r\n                    <LocalOfferIcon />\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n            </CardActions>\r\n          </Card>\r\n        ))\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Cart;\r\n","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\Navbar\\Navbar.jsx",["66"],"import React, { Fragment } from \"react\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport {\r\n  CssBaseline,\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./Navbar.module.css\";\r\n\r\nfunction Navbar(props) {\r\n  const mystyle = {\r\n    color: \"inherit\",\r\n    textDecoration: \"none\",\r\n  };\r\n  const matches = useMediaQuery('(max-width:512px)')\r\n  console.log(matches,\"matches\")\r\n\r\n  return (\r\n    <Fragment>\r\n        <Container>\r\n          <div\r\n            style={{\r\n              margin: \"2%\",\r\n              display: \"flex\",\r\n              justifyContent: matches? \"center\": \"space-between\"\r\n            }}\r\n          >\r\n            <Grid xs={9} sm = {8} md ={6} style = {{display:matches?\"none\":\"\"}}>\r\n              <Box display=\"flex\" justifyContent=\"space-between\">\r\n                <Typography className={styles.pointer} variant=\"h4\">\r\n                  EcomXp\r\n                </Typography>\r\n                <Typography className={styles.pointer} variant=\"h6\">\r\n                  <Link to=\"/\" style={mystyle}>\r\n                    Products\r\n                  </Link>\r\n                </Typography>\r\n                <Typography className={styles.pointer} variant=\"h6\">\r\n                  <Link to=\"add-product\" style={mystyle}>\r\n                    Add Products\r\n                  </Link>\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid xs={3} sm = {2}  >\r\n              <Box display=\"flex\" justifyContent=\"space-between\">\r\n                <Typography className={styles.pointer}>\r\n                  <Badge badgeContent={props.items} showZero color=\"error\">\r\n                    <Link to=\"cart\" style={mystyle}>\r\n                      <ShoppingCartIcon fontSize=\"large\" />\r\n                    </Link>\r\n                  </Badge>\r\n                </Typography>\r\n                <Typography className={styles.pointer}>\r\n                  <AccountCircleIcon fontSize=\"large\" />\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n          </div>\r\n        </Container>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\Components\\AddProducts.jsx",[],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\reducers\\index.js",[],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\api\\index.js",[],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\actions\\index.js",[],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\reducers\\products.js",[],"C:\\Users\\kishan\\Documents\\GitHub\\ecom\\src\\reducers\\cart.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":55,"column":17,"nodeType":"73","endLine":59,"endColumn":19},{"ruleId":"71","severity":1,"message":"72","line":124,"column":19,"nodeType":"73","endLine":133,"endColumn":21},{"ruleId":"67","replacedBy":"74"},{"ruleId":"69","replacedBy":"75"},{"ruleId":"71","severity":1,"message":"72","line":36,"column":19,"nodeType":"73","endLine":40,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":6,"column":3,"nodeType":"78","messageId":"79","endLine":6,"endColumn":14},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["80"],["81"],"no-unused-vars","'CssBaseline' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]